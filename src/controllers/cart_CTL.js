import cart_MD from "../models/cart_MD";
import stock_MD from "../models/stock_MD";
import variant_MD from "../models/variant_MD";
import cart_MD from "../models/cart_MD";
import stock_MD from "../models/stock_MD";
import Notification from "../models/notification_MD";
import cartItem_MD from "../models/cartItem_MD";
import User from "../models/auth_MD";

export const getOneCart = async (req, res) => {
    try {
        const user = req.user;
        const cart = await cart_MD.findOne({ user_id: req.user._id }).populate({
            path: "cart_items",
            populate: {
                path: "variant_id",
                populate: [
                    { path: "product_id", select: "name" },
                    { path: "color", select: "name" },
                    { path: "size", select: "size" }
                ]
            }
        });

        if (!cart) {
            return res.status(200).json({
                message: "L·∫•y gi·ªè h√†ng th√†nh c√¥ng",
                data: {
                    cart_items: [],
                    returning_items: [],
                    total: 0
                }
            });
        }

        let total = 0;
        const activeItems = [];
        const returningItems = [];
        const newNotifications = []; // L∆∞u th√¥ng b√°o m·ªõi t·∫°o

        for (const item of cart.cart_items) {
            const stock = await stock_MD.findOne({ product_variant_id: item.variant_id._id });

            // ‚úÖ Case 1: S·∫£n ph·∫©m h·∫øt h√†ng v√† ch∆∞a ƒë∆∞·ª£c ƒë√°nh d·∫•u is_returning
            if (!item.is_returning && (!stock || stock.quantity === 0)) {
                item.is_returning = true;
                await item.save();

                // üîî G·ª≠i th√¥ng b√°o h·∫øt h√†ng
                const outOfStockNotification = await Notification.create({
                    user_id: req.user._id,
                    type: "out_of_stock",
                    title: "S·∫£n ph·∫©m trong gi·ªè ƒë√£ h·∫øt h√†ng",
                    message: `S·∫£n ph·∫©m "${item.variant_id.product_id.name}" (${item.variant_id.color?.name ?? ''} / ${item.variant_id.size?.size ?? ''}) hi·ªán ƒë√£ h·∫øt h√†ng v√† ƒë∆∞·ª£c t·∫°m th·ªùi g·ª° kh·ªèi gi·ªè h√†ng.`,
                });
                newNotifications.push(outOfStockNotification);
            }

            // ‚úÖ Case 2: S·∫£n ph·∫©m ƒëang is_returning v√† c√≥ h√†ng tr·ªü l·∫°i
            if (item.is_returning && stock && stock.quantity > 0 && user.auto_restore_cart) {
                // Ch·ªâ kh√¥i ph·ª•c v√† th√¥ng b√°o khi user B·∫¨T auto_restore_cart
                item.is_returning = false;
                await item.save();

                // üîî G·ª≠i th√¥ng b√°o kh√¥i ph·ª•c t·ª± ƒë·ªông
                const restoreNotification = await Notification.create({
                    user_id: req.user._id,
                    type: "back_in_stock",
                    title: "S·∫£n ph·∫©m ƒë√£ c√≥ h√†ng tr·ªü l·∫°i",
                    message: `S·∫£n ph·∫©m "${item.variant_id.product_id.name}" (${item.variant_id.color?.name ?? ''} / ${item.variant_id.size?.size ?? ''}) ƒë√£ c√≥ h√†ng v√† ƒë∆∞·ª£c t·ª± ƒë·ªông th√™m l·∫°i v√†o gi·ªè h√†ng c·ªßa b·∫°n.`,
                });
                newNotifications.push(restoreNotification);
            }

            // üßÆ Ph√¢n lo·∫°i item v√† t√≠nh t·ªïng
            if (item.is_returning) {
                returningItems.push(item);
            } else {
                activeItems.push(item);
                const price = item.variant_id.price || 0;
                const quantity = item.quantity || 0;
                total += price * quantity;
            }
        }

        return res.status(200).json({
            message: "L·∫•y gi·ªè h√†ng th√†nh c√¥ng",
            data: {
                cart_items: activeItems,
                returning_items: returningItems,
                total,
                auto_restore_enabled: user.auto_restore_cart,
                new_notifications: newNotifications // Tr·∫£ v·ªÅ th√¥ng b√°o m·ªõi
            }
        });
    } catch (error) {
        return res.status(500).json({
            message: "L·ªói khi l·∫•y gi·ªè h√†ng",
            error: error.message
        });
    }
};


// th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
export const addToCart = async (req, res) => {
    try {
        const { variant_id, quantity} = req.body;
        const userId = req.user._id;

        let cart = await cart_MD.findOne({ user_id: userId });
        if (!cart) {
            cart = await cart_MD.create({ user_id: userId, cart_items: [] });
        }

        const variant = await variant_MD.findById(variant_id).populate('product_id', 'name');
        if (!variant) {
            return res.status(400).json({ message: "Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ s·∫£n ph·∫©m" });
        }

        if (variant.status === 'outOfStock') {
            return res.status(400).json({ message: "S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng" });
        }

        const stock = await stock_MD.findOne({ product_variant_id: variant_id });
        if (!stock || stock.quantity < quantity) {
            return res.status(400).json({ message: "Kh√¥ng ƒë·ªß h√†ng trong kho" });
        }

        let existingItem = await cartItem_MD.findOne({
            cart_id: cart._id,
            variant_id,
        });

        let addedItem;

        if (existingItem) {
            if (existingItem.quantity + quantity > stock.quantity) {
                return res.status(400).json({ message: "S·ªë l∆∞·ª£ng v∆∞·ª£t qu√° t·ªìn kho" });
            }
            existingItem.quantity += quantity;
            await existingItem.save();
            addedItem = existingItem;
        } else {
            const newItem = await cartItem_MD.create({
                cart_id: cart._id,
                variant_id,
                quantity
            });
            cart.cart_items.push(newItem._id);
            await cart.save();
            addedItem = newItem;
        }

        return res.status(200).json({
            message: "Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng",
            data: addedItem
        });

    } catch (error) {
        return res.status(500).json({
            message: "L·ªói khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng",
            error: error.message
        });
    }
};


export const updateCartItem = async (req, res) => {
    try {
        const variant_id = req.params.id;
        const { quantity } = req.body;

        // Ki·ªÉm tra input h·ª£p l·ªá
        if (!variant_id) {
            return res.status(400).json({
                message: "Thi·∫øu ID bi·∫øn th·ªÉ s·∫£n ph·∫©m (variant_id)"
            });
        }

        // Ki·ªÉm tra quantity h·ª£p l·ªá
        if (quantity === undefined || quantity === null) {
            return res.status(400).json({
                message: "Thi·∫øu th√¥ng tin s·ªë l∆∞·ª£ng (quantity)"
            });
        }

        // N·∫øu quantity = 0, x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
        if (quantity === 0) {
            const deletedItem = await cartItem_MD.findOneAndDelete({ variant_id });

            if (!deletedItem) {
                return res.status(404).json({
                    message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi bi·∫øn th·ªÉ ƒë√£ ch·ªçn trong gi·ªè h√†ng"
                });
            }

            // X√≥a item kh·ªèi cart
            await cart_MD.updateOne(
                { cart_items: deletedItem._id },
                { $pull: { cart_items: deletedItem._id } }
            );

            return res.status(200).json({
                message: "ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th√†nh c√¥ng",
                data: deletedItem
            });
        }

        // Ki·ªÉm tra quantity ph·∫£i l√† s·ªë d∆∞∆°ng
        if (quantity < 0) {
            return res.status(400).json({
                message: "S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0"
            });
        }

        // Ki·ªÉm tra tr·∫°ng th√°i variant
        const variant = await variant_MD.findById(variant_id).populate('product_id', 'name');
        if (!variant) {
            return res.status(404).json({
                message: "Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ s·∫£n ph·∫©m"
            });
        }

        if (variant.status === 'outOfStock') {
            return res.status(400).json({
                message: `${variant.product_id.name} - ${variant.color} size ${variant.size} ƒë√£ h·∫øt h√†ng`
            });
        }

        // T√¨m cart item v√† populate th√¥ng tin variant v√† product
        const cartItem = await cartItem_MD.findOne({ variant_id })
            .populate({
                path: 'variant_id',
                select: 'color size price image_url product_id',
                populate: {
                    path: 'product_id',
                    select: 'name'
                }
            });

        if (!cartItem) {
            return res.status(404).json({
                message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi bi·∫øn th·ªÉ ƒë√£ ch·ªçn trong gi·ªè h√†ng"
            });
        }

        // Ki·ªÉm tra t·ªìn kho
        const stock = await stock_MD.findOne({ product_variant_id: variant_id });

        if (quantity > stock.quantity) {
            return res.status(400).json({
                message: `${cartItem.variant_id.product_id.name} ch·ªâ c√≤n ${stock.quantity} s·∫£n ph·∫©m trong kho. Kh√¥ng th·ªÉ th√™m s·ªë l∆∞·ª£ng l√™n ${quantity}`,
            });
        };
        // Ki·ªÉm tra t·ªìn kho
        if (!stock || stock.quantity === 0) {
            return res.status(400).json({
                message: `${variant.product_id.name} - ${variant.color} size ${variant.size} ƒë√£ h·∫øt h√†ng`
            });
        }



        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng n·∫øu t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë·ªÅu h·ª£p l·ªá
        const updatedItem = await cartItem_MD.findOneAndUpdate(
            { variant_id },
            { quantity },
            { new: true, runValidators: true }
        ).populate({
            path: 'variant_id',
            select: 'color size price image_url product_id',
            populate: {
                path: 'product_id',
                select: 'name'
            }
        });

        return res.status(200).json({
            message: "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng",
            status: "SUCCESS",
            data: updatedItem
        });

    } catch (error) {
        return res.status(500).json({
            message: "ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng",
            error: error.message
        });
    }
};

// X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
export const removeFromCart = async (req, res) => {
    try {
        // t√¨m s·∫£n ph·∫©m trong gi·ªè h√†ng
        const cartItem = await cartItem_MD.findById(req.params.id);

        // ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i trong gi·ªè h√†ng kh√¥ng
        if (!cartItem) {
            return res.status(404).json({
                message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng"
            });
        }

        // l∆∞u cart_id tr∆∞·ªõc khi x√≥a
        const cartId = cartItem.cart_id;

        // x√≥a s·∫£n ph·∫©m trong gi·ªè h√†ng
        await cartItem_MD.findByIdAndDelete(req.params.id);

        // x√≥a ID s·∫£n ph·∫©m kh·ªèi danh s√°ch cart_items c·ªßa gi·ªè h√†ng
        await cart_MD.updateOne(
            { _id: cartId },
            { $pull: { cart_items: req.params.id } }
        );

        return res.status(200).json({
            message: "X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th√†nh c√¥ng",
            data: cartItem
        });

    } catch (error) {
        return res.status(500).json({
            message: "L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng",
            error: error.message
        });
    }
};

export const toggleAutoRestore = async (req, res) => {
    try {
        const user = await User.findById(req.user._id);
        user.auto_restore_cart = !user.auto_restore_cart;
        await user.save();

        return res.status(200).json({
            message: `ƒê√£ ${user.auto_restore_cart ? 'b·∫≠t' : 't·∫Øt'} ch·ª©c nƒÉng kh√¥i ph·ª•c gi·ªè h√†ng t·ª± ƒë·ªông.`,
            auto_restore_cart: user.auto_restore_cart
        });
    } catch (error) {
        return res.status(500).json({
            message: "L·ªói khi thay ƒë·ªïi ch·∫ø ƒë·ªô kh√¥i ph·ª•c gi·ªè h√†ng",
            error: error.message
        });
    }
};
