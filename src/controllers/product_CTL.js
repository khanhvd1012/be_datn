import mongoose from 'mongoose';
import Product from "../models/product_MD";
import Category from "../models/category_MD";
import Brand from "../models/brand_MD";
import Variant from "../models/variant_MD";
import Notification from "../models/notification_MD";
import User from "../models/auth_MD";
import { AppError } from "../middleware/errorHandler_MID";
import Order from "../models/order_MD";
import slugify from 'slugify';
import Review from "../models/review_MD";
import orderItem_MD from '../models/orderItem_MD';
import Stock from "../models/stock_MD";
import { setProductTimeout, clearProductTimeout } from '../middleware/timeoutRegistry_MID';

/**
 * G·ª≠i th√¥ng b√°o s·∫£n ph·∫©m m·ªõi cho t·∫•t c·∫£ admin
 * @param {Object} product - Th√¥ng tin s·∫£n ph·∫©m v·ª´a t·∫°o
 */
const sendNewProductNotificationToAdmins = async (product) => {
    try {
        // L·∫•y danh s√°ch t·∫•t c·∫£ admin
        const admins = await User.find({
            $or: [
                { role: 'admin' }
            ]
        });

        if (admins.length === 0) {
            console.log('Kh√¥ng t√¨m th·∫•y admin n√†o ƒë·ªÉ g·ª≠i th√¥ng b√°o');
            return;
        }

        // T·∫°o th√¥ng b√°o cho t·ª´ng admin
        const notifications = admins.map(admin => ({
            user_id: admin._id.toString(),
            title: 'S·∫£n ph·∫©m m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o! üì¶',
            message: `S·∫£n ph·∫©m "${product.name}" ƒë√£ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng. H√£y ki·ªÉm tra v√† c·∫≠p nh·∫≠t th√¥ng tin n·∫øu c·∫ßn thi·∫øt.`,
            type: 'product_new_admin',
            data: {
                product_id: product._id,
                product_name: product.name,
                product_slug: product.slug,
                category: product.category?.name || 'Ch∆∞a c√≥ danh m·ª•c',
                brand: product.brand?.name || 'Ch∆∞a c√≥ th∆∞∆°ng hi·ªáu',
                created_at: new Date()
            },
            is_read: false,
            created_at: new Date()
        }));

        // Bulk insert ƒë·ªÉ t·ªëi ∆∞u performance
        await Notification.insertMany(notifications);
        console.log(`ƒê√£ g·ª≠i th√¥ng b√°o s·∫£n ph·∫©m m·ªõi "${product.name}" cho ${admins.length} admin(s)`);

    } catch (error) {
        console.error('L·ªói khi g·ª≠i th√¥ng b√°o s·∫£n ph·∫©m m·ªõi cho admin:', error);
        // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác t·∫°o s·∫£n ph·∫©m
    }
};

/**
 * Controller l·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m
 * @description
 * - S·ª≠ d·ª•ng middleware requestHandler ƒë·ªÉ x·ª≠ l√Ω ph√¢n trang, s·∫Øp x·∫øp v√† t√¨m ki·∫øm
 * - Populate th√¥ng tin category v√† brand c·ªßa s·∫£n ph·∫©m
 * - Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m v√† th√¥ng tin ph√¢n trang
 */
export const getAllProduct = async (req, res, next) => {
    try {
        const { pagination, sorting, searching } = req;

        // L·∫•y danh s√°ch s·∫£n ph·∫©m v·ªõi ph√¢n trang
        const products = await Product.paginate(searching, {
            page: pagination.page,
            limit: pagination.limit,
            sort: sorting,
            populate: ['category', 'brand']
        });

        // L·∫•y gi√° th·∫•p nh·∫•t t·ª´ c√°c bi·∫øn th·ªÉ cho m·ªói s·∫£n ph·∫©m
        const productsWithMinPrice = await Promise.all(products.docs.map(async (product) => {
            const variants = await Variant.find({ product_id: product._id })
                .select('price')
                .sort({ price: 1 })
                .limit(1);

            const productObj = product.toObject();
            productObj.min_price = variants.length > 0 ? variants[0].price : 0;
            return productObj;
        }));

        return res.status(200).json({
            success: true,
            data: {
                products: productsWithMinPrice,
                pagination: {
                    total: products.totalDocs,
                    page: products.page,
                    pages: products.totalPages,
                    limit: products.limit
                }
            }
        });
    } catch (error) {
        next(error);
    }
};

/**
 * Controller l·∫•y th√¥ng tin chi ti·∫øt m·ªôt s·∫£n ph·∫©m
 * @description
 * - T√¨m s·∫£n ph·∫©m theo ID
 * - Populate th√¥ng tin category, brand v√† variants c·ªßa s·∫£n ph·∫©m
 * - Tr·∫£ v·ªÅ l·ªói n·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
 */
export const getOneProduct = async (req, res, next) => {
    try {
        const product = await Product.findById(req.params.id)
            .populate(['category', 'brand', 'variants']);

        if (!product) {
            throw new AppError('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m', 404);
        }

        return res.status(200).json({
            success: true,
            data: product
        });
    } catch (error) {
        next(error);
    }
};

/**
 * Controller t·∫°o s·∫£n ph·∫©m m·ªõi v√† g·ª≠i th√¥ng b√°o cho admin
 * @description
 * - Ki·ªÉm tra category v√† brand t·ªìn t·∫°i
 * - T·∫°o s·∫£n ph·∫©m m·ªõi v·ªõi th√¥ng tin t·ª´ request body
 * - C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m trong category v√† brand t∆∞∆°ng ·ª©ng
 * - T·ª± ƒë·ªông g·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ admin
 * - Tr·∫£ v·ªÅ th√¥ng tin s·∫£n ph·∫©m v·ª´a t·∫°o
 */
export const createProduct = async (req, res, next) => {
    try {
        // Ki·ªÉm tra category v√† brand t·ªìn t·∫°i
        const [category, brand] = await Promise.all([
            mongoose.model('Categories').findById(req.body.category),
            mongoose.model('Brands').findById(req.body.brand),
        ]);

        if (!category) {
            return res.status(404).json({
                success: false,
                message: `Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: ${req.body.category}`
            });
        }
        if (!brand) {
            return res.status(404).json({
                success: false,
                message: `Kh√¥ng t√¨m th·∫•y th∆∞∆°ng hi·ªáu v·ªõi ID: ${req.body.brand}`
            });
        }

        // T·∫°o s·∫£n ph·∫©m m·ªõi
        const slug = slugify(req.body.name, { lower: true, strict: true });

        const product = await Product.create({
            name: req.body.name,
            slug,
            description: req.body.description,
            brand: brand._id,
            category: category._id,
        });

        // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m trong category v√† brand
        await Promise.all([
            mongoose.model('Categories').findByIdAndUpdate(
                category._id,
                { $addToSet: { products: product._id } }
            ),
            mongoose.model('Brands').findByIdAndUpdate(
                brand._id,
                { $addToSet: { products: product._id } }
            )
        ]);

        // Populate th√¥ng tin category v√† brand
        const populatedProduct = await Product.findById(product._id)
            .populate('category', 'name')
            .populate('brand', 'name');

        // G·ª≠i th√¥ng b√°o cho admin ngay sau khi t·∫°o s·∫£n ph·∫©m th√†nh c√¥ng

        // Ch·∫°y b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn response time
        setImmediate(async () => {
            await sendNewProductNotificationToAdmins({
                ...populatedProduct.toObject(),
                category: { name: category.name },
                brand: { name: brand.name }
            });
        });

        // G·ª≠i th√¥ng b√°o cho kh√°ch h√†ng sau 1 gi·ªù

        const timeoutId = setTimeout(async () => {
            await sendNewProductNotificationToCustomers({
                ...populatedProduct.toObject()
            });
        }, 36000); // 1 gi·ªù

        setProductTimeout(product._id, timeoutId);

        return res.status(201).json({
            success: true,
            message: 'T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng. Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn admin.',
            data: populatedProduct
        });
    } catch (error) {
        // Ki·ªÉm tra l·ªói ObjectId kh√¥ng h·ª£p l·ªá
        if (error.name === 'CastError') {
            return res.status(400).json({
                success: false,
                message: `ID kh√¥ng h·ª£p l·ªá cho tr∆∞·ªùng ${error.path}`
            });
        }
        next(error);
    }
};

/**
 * Controller c·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m
 * @description
 * - Ki·ªÉm tra s·∫£n ph·∫©m t·ªìn t·∫°i
 * - N·∫øu thay ƒë·ªïi category ho·∫∑c brand, ki·ªÉm tra category/brand m·ªõi c√≥ t·ªìn t·∫°i kh√¥ng
 * - C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m
 * - Populate v√† tr·∫£ v·ªÅ th√¥ng tin s·∫£n ph·∫©m sau khi c·∫≠p nh·∫≠t
 */
export const updateProduct = async (req, res, next) => {
    try {
        const product = await Product.findById(req.params.id);
        if (!product) {
            throw new AppError('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m', 404);
        }

        // Ki·ªÉm tra category v√† brand m·ªõi n·∫øu c√≥ thay ƒë·ªïi
        if (req.body.category && req.body.category !== product.category.toString()) {
            const category = await mongoose.model('Categories').findById(req.body.category);
            if (!category) {
                throw new AppError('Danh m·ª•c kh√¥ng t·ªìn t·∫°i', 404);
            }
        }
        if (req.body.brand && req.body.brand !== product.brand.toString()) {
            const brand = await mongoose.model('Brands').findById(req.body.brand);
            if (!brand) {
                throw new AppError('Th∆∞∆°ng hi·ªáu kh√¥ng t·ªìn t·∫°i', 404);
            }
        }
        if (req.body.name) {
            req.body.slug = slugify(req.body.name, { lower: true, strict: true });
        }

        const updatedProduct = await Product.findByIdAndUpdate(
            req.params.id,
            req.body,
            { new: true, runValidators: true }
        ).populate(['category', 'brand', 'variants']);

        return res.status(200).json({
            success: true,
            message: 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng',
            data: updatedProduct
        });
    } catch (error) {
        next(error);
    }
};

/**
 * Controller x√≥a s·∫£n ph·∫©m
 * @description
 * - Ki·ªÉm tra s·∫£n ph·∫©m t·ªìn t·∫°i
 * - Ki·ªÉm tra s·∫£n ph·∫©m c√≥ trong ƒë∆°n h√†ng n√†o kh√¥ng
 * - X√≥a s·∫£n ph·∫©m kh·ªèi danh s√°ch trong category v√† brand
 * - X√≥a t·∫•t c·∫£ bi·∫øn th·ªÉ c·ªßa s·∫£n ph·∫©m
 * - X√≥a s·∫£n ph·∫©m
 */
export const removeProduct = async (req, res, next) => {
    try {
        const product = await Product.findById(req.params.id);
        if (!product) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m'
            });
        }

        // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ ƒë∆°n h√†ng kh√¥ng (OrderItem ho·∫∑c Order)
        const hasOrderItem = await orderItem_MD.exists({ product_id: product._id });
        const hasOrder = await Order.exists({ 'items.product': product._id });
        if (hasOrderItem || hasOrder) {
            return res.status(400).json({
                success: false,
                message: 'Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m ƒë√£ c√≥ ƒë∆°n h√†ng'
            });
        }

        // Ki·ªÉm tra bi·∫øn th·ªÉ ƒë√£ c√≥ ƒë√°nh gi√°
        const variants = await Variant.find({ product_id: product._id });
        for (const variant of variants) {
            const hasReview = await Review.exists({
                product_id: product._id,
                $or: [
                    { product_variant_id: variant._id },
                    { variant_id: variant._id }
                ]
            });
            if (hasReview) {
                return res.status(400).json({
                    success: false,
                    message: 'Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m ƒë√£ c√≥ ƒë√°nh gi√°'
                });
            }
        }
        // L·∫•y danh s√°ch ID bi·∫øn th·ªÉ ƒë·ªÉ x√≥a stock
        const variantIds = variants.map(v => v._id);
        await Stock.deleteMany({ product_variant_id: { $in: variantIds } });

        // X√≥a t·∫•t c·∫£ bi·∫øn th·ªÉ c·ªßa s·∫£n ph·∫©m
        await Variant.deleteMany({ product_id: product._id });

        // X√≥a s·∫£n ph·∫©m kh·ªèi category v√† brand
        await Promise.all([
            Category.findByIdAndUpdate(
                product.category,
                { $pull: { products: product._id } }
            ),
            Brand.findByIdAndUpdate(
                product.brand,
                { $pull: { products: product._id } }
            )
        ]);
        // X√≥a timeout cho s·∫£n ph·∫©m
        clearProductTimeout(product._id);

        // X√≥a s·∫£n ph·∫©m
        await Product.deleteOne({ _id: product._id });

        return res.status(200).json({
            success: true,
            message: 'X√≥a s·∫£n ph·∫©m th√†nh c√¥ng'
        });
    } catch (error) {
        next(error);
    }
};

/**
 * Controller l·∫•y danh s√°ch bi·∫øn th·ªÉ c·ªßa s·∫£n ph·∫©m
 * @description
 * - T√¨m s·∫£n ph·∫©m theo ID
 * - Populate th√¥ng tin variants v√† stock c·ªßa t·ª´ng variant
 * - Tr·∫£ v·ªÅ danh s√°ch variants c·ªßa s·∫£n ph·∫©m
 */
export const getProductVariants = async (req, res, next) => {
    try {
        const product = await Product.findById(req.params.id)
            .populate({
                path: 'variants',
                populate: {
                    path: 'stock',
                    select: 'quantity'
                }
            });

        if (!product) {
            throw new AppError('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m', 404);
        }

        return res.status(200).json({
            success: true,
            data: product.variants
        });
    } catch (error) {
        next(error);
    }
};

/**
 * Controller l·∫•y s·∫£n ph·∫©m theo slug
 */
export const getProductBySlug = async (req, res) => {
    try {
        const product = await Product.findOne({ slug: req.params.slug })
            .populate("brand")
            .populate("category")
            .populate("variants");

        if (!product) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
        }

        // L·∫•y t·∫•t c·∫£ order ƒë√£ giao th√†nh c√¥ng, populate sang OrderItem
        const orders = await Order.find({
            status: "delivered",
        }).populate({
            path: "items",
            match: { variant_id: { $in: product.variants.map((v) => v._id) } },
            select: "variant_id quantity", // ch·ªâ l·∫•y field c·∫ßn d√πng
        });

        // Gom s·ªë l∆∞·ª£ng ƒë√£ b√°n theo variant_id
        const soldMap = {};
        orders.forEach((order) => {
            order.items.forEach((item) => {
                const variantId = item.variant_id.toString();
                if (!soldMap[variantId]) soldMap[variantId] = 0;
                soldMap[variantId] += item.quantity;
            });
        });

        // Th√™m stock v√† soldQuantity v√†o t·ª´ng variant
        const variantsWithStock = await Promise.all(
            product.variants.map(async (variant) => {
                const stock = await Stock.findOne({ product_variant_id: variant._id });

                return {
                    ...variant.toObject(),
                    stock: {
                        quantity: stock ? stock.quantity : 0,
                        status: variant.status,
                    },
                    soldQuantity: soldMap[variant._id.toString()] || 0,
                };
            })
        );

        const productData = {
            ...product.toObject(),
            variants: variantsWithStock,
        };

        return res.status(200).json({
            success: true,
            data: productData,
        });
    } catch (error) {
        console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m theo slug:", error);
        return res.status(500).json({
            success: false,
            message: "L·ªói m√°y ch·ªß",
            error: error.message,
        });
    }
};

export const getRelatedProducts = async (req, res) => {
    try {
        const { slug } = req.params;

        // T√¨m s·∫£n ph·∫©m hi·ªán t·∫°i theo slug
        const product = await Product.findOne({ slug }).populate("category");
        if (!product) {
            return res.status(404).json({
                success: false,
                message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m",
            });
        }

        // L·∫•y s·∫£n ph·∫©m li√™n quan trong c√πng category (ngo·∫°i tr·ª´ ch√≠nh n√≥)
        const relatedProducts = await Product.find({
            category: product.category._id,
            _id: { $ne: product._id },
        })
            .limit(10)
            .populate("brand")
            .populate("category")
            .populate({
                path: "variants",
                populate: [
                    { path: "size" },   // n·∫øu Variant c√≥ tham chi·∫øu t·ªõi Size
                    { path: "color" },  // n·∫øu Variant c√≥ tham chi·∫øu t·ªõi Color
                ],
            });

        return res.status(200).json({
            success: true,
            data: relatedProducts,
        });
    } catch (error) {
        console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m li√™n quan:", error);
        return res.status(500).json({
            success: false,
            message: "L·ªói m√°y ch·ªß",
            error: error.message,
        });
    }
};

const sendNewProductNotificationToCustomers = async (product) => {
    try {
        const customers = await User.find({ role: 'user' }); // ho·∫∑c l·ªçc theo ƒëi·ªÅu ki·ªán ph√π h·ª£p

        if (customers.length === 0) return;

        const notifications = customers.map(user => ({
            user_id: user._id.toString(),
            title: 'S·∫£n ph·∫©m m·ªõi ƒë√£ ra m·∫Øt! üéâ',
            message: `Kh√°m ph√° s·∫£n ph·∫©m m·ªõi "${product.name}" ngay h√¥m nay!`,
            type: 'product_new_user',
            data: {
                product_id: product._id,
                product_name: product.name,
                product_slug: product.slug,
                created_at: new Date()
            },
            is_read: false,
            created_at: new Date()
        }));

        await Notification.insertMany(notifications);
        console.log(`ƒê√£ g·ª≠i th√¥ng b√°o s·∫£n ph·∫©m m·ªõi "${product.name}" cho ${customers.length} kh√°ch h√†ng`);
    } catch (error) {
        console.error('L·ªói khi g·ª≠i th√¥ng b√°o s·∫£n ph·∫©m m·ªõi cho kh√°ch h√†ng:', error);
    }
};

