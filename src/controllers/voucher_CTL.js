import Voucher_MD from "../models/voucher_MD";
import Notification from "../models/notification_MD";
import User from "../models/auth_MD";
import { setVoucherTimeout, clearVoucherTimeout } from "../middleware/timeoutRegistry_MID";

/**
 * G·ª≠i th√¥ng b√°o voucher m·ªõi cho t·∫•t c·∫£ admin
 * @param {Object} voucher - Th√¥ng tin voucher
 */
const sendVoucherNotificationToAdmins = async (voucher) => {
    try {
        // L·∫•y danh s√°ch t·∫•t c·∫£ admin
        const admins = await User.find({ 
            $or: [
                { role: 'admin' },
                { is_admin: true }
            ]
        });
        
        if (admins.length === 0) {
            console.log('Kh√¥ng t√¨m th·∫•y admin n√†o ƒë·ªÉ g·ª≠i th√¥ng b√°o voucher');
            return;
        }

        // T·∫°o th√¥ng b√°o cho t·ª´ng admin
        const notifications = admins.map(admin => ({
            user_id: admin._id.toString(),
            title: 'Voucher m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o! üéüÔ∏è',
            message: `Voucher "${voucher.code}" v·ªõi gi√° tr·ªã ${voucher.type === 'percentage' ? voucher.value + '%' : voucher.value + 'ƒë'} ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. Th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c g·ª≠i cho kh√°ch h√†ng sau 1 gi·ªù.`,
            type: 'voucher_new_admin',
            data: {
                voucher_id: voucher._id,
                voucher_code: voucher.code,
                discount_value: voucher.value,
                discount_type: voucher.type,
                expires_at: voucher.expires_at,
                created_at: new Date(),
                action: 'created'
            },
            is_read: false,
            created_at: new Date()
        }));

        // Bulk insert ƒë·ªÉ t·ªëi ∆∞u performance
        await Notification.insertMany(notifications);
        console.log(`ƒê√£ g·ª≠i th√¥ng b√°o voucher m·ªõi "${voucher.code}" cho ${admins.length} admin(s)`);
        
    } catch (error) {
        console.error('L·ªói khi g·ª≠i th√¥ng b√°o voucher cho admin:', error);
        // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác t·∫°o voucher
    }
};

/**
 * G·ª≠i th√¥ng b√°o voucher m·ªõi cho t·∫•t c·∫£ kh√°ch h√†ng (user)
 * @param {Object} voucher - Th√¥ng tin voucher
 */
const sendVoucherNotificationToAllUsers = async (voucher) => {
    try {
        const users = await User.find({ 
            $or: [
                { role: 'user' },
                { role: { $exists: false } }
            ]
        });

        if (users.length === 0) {
            console.log('Kh√¥ng t√¨m th·∫•y user n√†o ƒë·ªÉ g·ª≠i th√¥ng b√°o voucher');
            return;
        }

        const notifications = users.map(user => ({
            user_id: user._id.toString(),
            title: 'Voucher m·ªõi ƒë√£ c√≥ s·∫µn! üéâ',
            message: `S·ª≠ d·ª•ng m√£ ${voucher.code} ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i ${
                voucher.type === 'percentage' ? voucher.value + '%' : voucher.value + 'ƒë'
            } cho ƒë∆°n h√†ng c·ªßa b·∫°n! C√≥ hi·ªáu l·ª±c t·ª´ ${new Date(voucher.startDate).toLocaleDateString('vi-VN')} ƒë·∫øn ${new Date(voucher.endDate).toLocaleDateString('vi-VN')}.`,
            type: 'voucher_new_user',
            data: {
                voucher_id: voucher._id,
                voucher_code: voucher.code,
                discount_value: voucher.value,
                discount_type: voucher.type,
                start_date: voucher.startDate,
                end_date: voucher.endDate,
                min_order_value: voucher.minOrderValue,
                created_at: new Date()
            },
            is_read: false,
            created_at: new Date()
        }));

        await Notification.insertMany(notifications);
        console.log(`ƒê√£ g·ª≠i th√¥ng b√°o voucher "${voucher.code}" cho ${users.length} kh√°ch h√†ng`);
        
    } catch (error) {
        console.error('L·ªói khi g·ª≠i th√¥ng b√°o voucher cho user:', error);
        throw error;
    }
};


/**
 * T·∫°o voucher m·ªõi, g·ª≠i th√¥ng b√°o ngay cho admin v√† l√™n l·ªãch g·ª≠i th√¥ng b√°o cho user sau 1 gi·ªù
 * @param {Object} req - Request object ch·ª©a th√¥ng tin voucher c·∫ßn t·∫°o
 * @param {Object} res - Response object
 * @returns {Object} Voucher ƒë√£ t·∫°o th√†nh c√¥ng ho·∫∑c th√¥ng b√°o l·ªói
 */
export const createVoucher = async (req, res) => {
    try {
        // Ki·ªÉm tra xem voucher ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingVoucher = await Voucher_MD.findOne({ code: req.body.code });
        if (existingVoucher) {
            return res.status(400).json({
                message: "Voucher ƒë√£ t·ªìn t·∫°i",
            });
        }

        // T·∫°o voucher m·ªõi
        const voucher = await Voucher_MD.create(req.body);

        // G·ª≠i th√¥ng b√°o ngay l·∫≠p t·ª©c cho admin
        setImmediate(async () => {
            await sendVoucherNotificationToAdmins(voucher);
        });

        // L√™n l·ªãch g·ª≠i th√¥ng b√°o cho user sau 1 gi·ªù (3600000 milliseconds)
        const timeoutId = setTimeout(async () => {
            try {
                await sendVoucherNotificationToAllUsers(voucher);
                console.log(`[SCHEDULED] ƒê√£ g·ª≠i th√¥ng b√°o voucher ${voucher.code} cho t·∫•t c·∫£ kh√°ch h√†ng sau 1 gi·ªù`);
            } catch (error) {
                console.error('[SCHEDULED] L·ªói khi g·ª≠i th√¥ng b√°o voucher cho user:', error);
            }
        }, 36000); // ‚úÖ ƒë√∫ng 1 gi·ªù
        
        setVoucherTimeout(voucher._id, timeoutId);

        return res.status(201).json({
            message: "T·∫°o voucher th√†nh c√¥ng. Admin ƒë√£ ƒë∆∞·ª£c th√¥ng b√°o ngay l·∫≠p t·ª©c. Th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c g·ª≠i cho kh√°ch h√†ng sau 1 gi·ªù.",
            data: voucher
        });
    } catch (error) {
        return res.status(500).json({
            message: "L·ªói khi t·∫°o voucher",
            error: error.message
        });
    }
};

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ voucher
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 * @returns {Array} Danh s√°ch voucher ho·∫∑c th√¥ng b√°o l·ªói
 */
export const getAllVouchers = async (req, res) => {
    try {
        const vouchers = await Voucher_MD.find().sort({ createdAt: -1 });
        return res.status(200).json(vouchers);
    } catch (error) {
        return res.status(500).json({
            message: "L·ªói khi l·∫•y danh s√°ch voucher",
            error: error.message
        });
    }
};

/**
 * L·∫•y th√¥ng tin voucher theo ID
 * @param {Object} req - Request object ch·ª©a ID trong params
 * @param {Object} res - Response object
 * @returns {Object} Th√¥ng tin voucher ho·∫∑c th√¥ng b√°o l·ªói
 */
export const getOneVoucher = async (req, res) => {
    try {
        const voucher = await Voucher_MD.findById(req.params.id);

        if (!voucher) {
            return res.status(404).json({ message: "Voucher kh√¥ng t·ªìn t·∫°i" });
        }
        return res.status(200).json(voucher);
    } catch (error) {
        return res.status(500).json({ 
            message: "L·ªói khi l·∫•y voucher", 
            error: error.message 
        });
    }
};

/**
 * C·∫≠p nh·∫≠t th√¥ng tin voucher
 * @param {Object} req - Request object ch·ª©a id v√† th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t
 * @param {Object} res - Response object
 * @returns {Object} Voucher ƒë√£ c·∫≠p nh·∫≠t ho·∫∑c th√¥ng b√°o l·ªói
 */
export const updateVoucher = async (req, res) => {
    try {
        // Ki·ªÉm tra usedCount kh√¥ng v∆∞·ª£t qu√° quantity
        if (req.body.usedCount && req.body.quantity && req.body.usedCount > req.body.quantity) {
            return res.status(400).json({
                message: "S·ªë l∆∞·ª£ng ƒë√£ s·ª≠ d·ª•ng kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° t·ªïng s·ªë l∆∞·ª£ng"
            });
        }

        const voucher = await Voucher_MD.findByIdAndUpdate(
            req.params.id,
            req.body,
            { new: true }
        );

        if (!voucher) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y voucher" });
        }

        return res.status(200).json({
            message: "C·∫≠p nh·∫≠t voucher th√†nh c√¥ng",
            data: voucher
        });
    } catch (error) {
        return res.status(500).json({
            message: "L·ªói khi c·∫≠p nh·∫≠t voucher",
            error: error.message
        });
    }
};

/**
 * X√≥a voucher
 * @param {Object} req - Request object ch·ª©a id voucher c·∫ßn x√≥a
 * @param {Object} res - Response object
 * @returns {Object} Th√¥ng b√°o x√≥a th√†nh c√¥ng ho·∫∑c l·ªói
 */
export const deleteVoucher = async (req, res) => {
    try {
        const voucher = await Voucher_MD.findByIdAndDelete(req.params.id);

        if (!voucher) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y voucher" });
        }

        // X√≥a timeout cho voucher
        clearVoucherTimeout(voucher._id);

        return res.status(200).json({ message: "X√≥a voucher th√†nh c√¥ng" });
    } catch (error) {
        return res.status(500).json({
            message: "L·ªói khi x√≥a voucher",
            error: error.message
        });
    }
};

// /**
//  * G·ª≠i th√¥ng b√°o voucher ngay l·∫≠p t·ª©c cho user (d√†nh cho admin test)
//  * @param {Object} req - Request object ch·ª©a voucher_id
//  * @param {Object} res - Response object
//  */
// export const sendVoucherNotificationToUsersNow = async (req, res) => {
//     try {
//         const voucher = await Voucher_MD.findById(req.params.id);
        
//         if (!voucher) {
//             return res.status(404).json({ message: "Voucher kh√¥ng t·ªìn t·∫°i" });
//         }

//         await sendVoucherNotificationToAllUsers(voucher);

//         return res.status(200).json({
//             message: "ƒê√£ g·ª≠i th√¥ng b√°o voucher cho t·∫•t c·∫£ kh√°ch h√†ng"
//         });
//     } catch (error) {
//         return res.status(500).json({
//             message: "L·ªói khi g·ª≠i th√¥ng b√°o",
//             error: error.message
//         });
//     }
// };

// /**
//  * G·ª≠i th√¥ng b√°o voucher ngay l·∫≠p t·ª©c cho admin (d√†nh cho test)
//  * @param {Object} req - Request object ch·ª©a voucher_id
//  * @param {Object} res - Response object
//  */
// export const sendVoucherNotificationToAdminsNow = async (req, res) => {
//     try {
//         const voucher = await Voucher_MD.findById(req.params.id);
        
//         if (!voucher) {
//             return res.status(404).json({ message: "Voucher kh√¥ng t·ªìn t·∫°i" });
//         }

//         await sendVoucherNotificationToAdmins(voucher);

//         return res.status(200).json({
//             message: "ƒê√£ g·ª≠i th√¥ng b√°o voucher cho t·∫•t c·∫£ admin"
//         });
//     } catch (error) {
//         return res.status(500).json({
//             message: "L·ªói khi g·ª≠i th√¥ng b√°o",
//             error: error.message
//         });
//     }
// };